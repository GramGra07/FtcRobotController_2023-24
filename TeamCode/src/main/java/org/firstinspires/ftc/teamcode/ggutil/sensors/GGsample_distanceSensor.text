package org.firstinspires.ftc.teamcode;
import android.content.Context;
import android.graphics.Color;
import com.qualcomm.ftccommon.SoundPlayer;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.hardware.rev.Rev2mDistanceSensor;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.NormalizedRGBA;
import com.qualcomm.robotcore.hardware.NormalizedColorSensor;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.teamcode.externalTests.HardwareConfig;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.internal.system.Deadline;
import java.util.List;
import java.util.Locale;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
@Disabled
public class distanceSensor extends teleOpBuild{
    //distance
    public double MM_distance1 = 0;//mm distance for distance sensor 1
    public double CM_distance1 = 0;//cm distance for distance sensor 1
    public double M_distance1 = 0;//m distance for distance sensor 1
    public double IN_distance1 = 0;//in distance for distance sensor 1
    //range
    boolean inRange = false;//tested to see if distance sensor is in range
    boolean updated_inRange = false;//tests again to a boolean for if in range
    boolean updatedHeadingInRange = false;//heading check for low to high
    @Override
    public void runOpMode(){
        waitForStart();
        while(opModeIsActive()){
            //distance
            telemetry.addData("ID", String.format("%x", sensorTimeOfFlight.getModelID()));//distance sensor
            telemetry.addData("did time out", Boolean.toString(sensorTimeOfFlight.didTimeoutOccur()));//distance sensor
        
        }
    }
    public void showFeedback(){
        getDistance1(true);//gets and shows distances
        telemetry.addData("Distance Result",verifyDistance(1));
    }
    //distance
    public void getDistance1(boolean give){
        MM_distance1= distance1.getDistance(DistanceUnit.MM);
        CM_distance1= distance1.getDistance(DistanceUnit.CM);
        M_distance1= distance1.getDistance(DistanceUnit.METER);
        IN_distance1= distance1.getDistance(DistanceUnit.INCH);
        if (give) {
            giveDistances();
        }
    }
    public void giveDistances(){
        telemetry.addLine()
                .addData("distance", String.format("%.0001f mm",MM_distance1))
                .addData("distance", String.format("%.0001f cm",CM_distance1))
                .addData("distance", String.format("%.0001f m",M_distance1))
                .addData("distance", String.format("%.0001f in",IN_distance1));
    }
    public String verifyDistance(int sensor_number){
        if (sensor_number == 1 ){
            getDistance1(false);
            if ((CM_distance1 * 10 != MM_distance1)||(M_distance1 * 10 != CM_distance1)){
                return "Distance isn't perfect";
            }
            else{
                return "Distance is perfect";
            }
        }
        return null;
    }
    //range
    //if (checkDistance(1,10,1,"cm"))==True{}
    public boolean checkDistance(int sensor_number,int maxD,int minD,String unit){
        resetRanges();
        if (sensor_number==1){
            getDistance1(false);
            if (unit.equals("cm")){
                if (CM_distance1 >= minD && CM_distance1 <= maxD){
                    inRange=true;
                }
            }
            else if (unit.equals("mm")){
                if (MM_distance1>=minD && MM_distance1<=maxD){
                    inRange=true;
                }
            }
            else if (unit.equals("in")){
                if (IN_distance1>=minD && IN_distance1<=maxD){
                    inRange=true;
                }
            }
            else if (unit.equals("m")){
                if (M_distance1>=minD && M_distance1<=maxD){
                    inRange=true;
                }
            }
            else{
                inRange=false;
            }
        }
        return inRange;
    }
    //resets range
    public void resetRanges(){
        updated_inRange= false;
        inRange=false;
    }
}