package org.firstinspires.ftc.teamcode.ggsamples;

import static com.qualcomm.robotcore.hardware.DcMotor.ZeroPowerBehavior.BRAKE;

import android.content.Context;
import android.graphics.Color;

import com.qualcomm.ftccommon.SoundPlayer;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.hardware.rev.Rev2mDistanceSensor;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.NormalizedRGBA;
import com.qualcomm.robotcore.hardware.NormalizedColorSensor;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.teamcode.externalTests.HardwareConfig;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.internal.system.Deadline;
import org.firstinspires.ftc.teamcode.teleOp.robotCentric;

import java.util.List;
import java.util.Locale;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;

@Disabled
@Autonomous(name = "distanceSensorTest", group = "robot")
public class distanceSensorTest extends scrap {
    //distance
    //range
    private DistanceSensor rDistance;
    private DistanceSensor lDistance;
    private DistanceSensor fDistance;
    private DistanceSensor bDistance;

    @Override
    public void runOpMode() {
        rDistance = hardwareMap.get(DistanceSensor.class, "rDistance");
        lDistance = hardwareMap.get(DistanceSensor.class, "lDistance");
        fDistance = hardwareMap.get(DistanceSensor.class, "fDistance");
        bDistance = hardwareMap.get(DistanceSensor.class, "bDistance");
        DcMotor motorFrontLeft = hardwareMap.get(DcMotor.class, "motorFrontLeft");//getting the motorFrontLeft motor
        DcMotor motorBackLeft = hardwareMap.get(DcMotor.class, "motorBackLeft");//getting the motorBackLeft motor
        DcMotor motorFrontRight = hardwareMap.get(DcMotor.class, "motorFrontRight");//getting the motorFrontRight motor
        DcMotor motorBackRight = hardwareMap.get(DcMotor.class, "motorBackRight");//getting the motorBackRight motor
        motorFrontRight.setDirection(DcMotor.Direction.REVERSE);//setting the motorFrontRight direction
        motorBackRight.setDirection(DcMotor.Direction.REVERSE);//setting the motorBackRight direction

        motorBackRight.setZeroPowerBehavior(BRAKE);
        motorBackLeft.setZeroPowerBehavior(BRAKE);
        motorFrontRight.setZeroPowerBehavior(BRAKE);
        motorFrontLeft.setZeroPowerBehavior(BRAKE);
        waitForStart();
        if (opModeIsActive()) {
            //distance
            telemetry.addData("f", fDistance.getDistance(DistanceUnit.INCH));
            telemetry.addData("b", bDistance.getDistance(DistanceUnit.INCH));
            telemetry.addData("l", lDistance.getDistance(DistanceUnit.INCH));
            telemetry.addData("r", rDistance.getDistance(DistanceUnit.INCH));
            while (fDistance.getDistance(DistanceUnit.INCH) > 10) {
                telemetry.addData("f", fDistance.getDistance(DistanceUnit.INCH));
                telemetry.update();
                motorBackLeft.setPower(-0.5);
                motorBackRight.setPower(-0.5);
                motorFrontLeft.setPower(-0.5);
                motorFrontRight.setPower(-0.5);
                if (fDistance.getDistance(DistanceUnit.INCH) <= 10) {

                    motorBackLeft.setPower(0);
                    motorBackRight.setPower(0);
                    motorFrontLeft.setPower(0);
                    motorFrontRight.setPower(0);
                }
            }
            telemetry.update();

        }
    }
}