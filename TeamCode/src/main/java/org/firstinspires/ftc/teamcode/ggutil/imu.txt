//imu
    //public static BNO055IMU imu;
    //public static Orientation angles;     //imu uses these to find angles and classify them
    //public Acceleration gravity;    //Imu uses to get acceleration
    //public double primaryHeading, primaryRoll, primaryPitch;
    //public double heading, roll, pitch;

//imu
        //if (!auto) {
        //    BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        //    parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        //    parameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        //    parameters.calibrationDataFile = "BNO055IMUCalibration.json"; // see the calibration sample opmode
        //    parameters.loggingEnabled = true;
        //    parameters.loggingTag = "IMU";
        //    parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();
        //    imu = ahwMap.get(BNO055IMU.class, "imu");
        //    imu.initialize(parameters);
        //    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.YZX, AngleUnit.DEGREES);
        //    gravity = imu.getGravity();
        //    imu.startAccelerationIntegration(new Position(), new Velocity(), 1000);
        //}
//IMU
    //public void getOrientation() {
    //    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
    //    heading = angles.firstAngle - primaryHeading;
    //    roll = angles.secondAngle - primaryRoll;
    //    pitch = angles.thirdAngle - primaryPitch;
    //}

    //meant to fix orientation problems
    //public void findOrientationOffset() {
    //    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
    //    primaryHeading = angles.firstAngle;
    //    primaryRoll = angles.secondAngle;
    //    primaryPitch = angles.thirdAngle;
    //}