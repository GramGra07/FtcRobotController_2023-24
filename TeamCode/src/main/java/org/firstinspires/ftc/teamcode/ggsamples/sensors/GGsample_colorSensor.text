package org.firstinspires.ftc.teamcode;
import android.content.Context;
import android.graphics.Color;
import com.qualcomm.ftccommon.SoundPlayer;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.hardware.rev.Rev2mDistanceSensor;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.NormalizedRGBA;
import com.qualcomm.robotcore.hardware.NormalizedColorSensor;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.teamcode.externalTests.HardwareConfig;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.internal.system.Deadline;
import java.util.List;
import java.util.Locale;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
@Disabled
public class colorSensor extends teleOpBuild{
    //color
    final float[] hsvValues = new float[3];//gets values for color sensor
    public int redVal = 0;//the red value in rgb
    public int greenVal = 0;//the green value in rgb
    public int blueVal = 0;//the blue value in rgb
    public String colorName = "N/A";//gets color name

    @Override
    public void runOpMode(){
        waitForStart();
        while(opModeIsActive()){
        }
    }
    public void showFeedback(){
        //gives color values
        NormalizedRGBA colors = robot.sensor_color.getNormalizedColors();
        Color.colorToHSV(colors.toColor(), hsvValues);
        telemetry.addLine()
                .addData("Red", "%.3f", colors.red)
                .addData("Green", "%.3f", colors.green)
                .addData("Blue", "%.3f", colors.blue)
                .addData("Hue", "%.3f", hsvValues[0])
                .addData("Saturation", "%.3f", hsvValues[1])
                .addData("Value", "%.3f", hsvValues[2])
                .addData("Alpha", "%.3f", colors.alpha);
        get_color_name(colors.red, colors.green, colors.blue);
        telemetry.addLine()
                .addData("Color", colorName)
                .addData("RGB", "(" + redVal + "," + greenVal + "," + blueVal + ")");//shows rgb value
        
        teleSpace();
    }
    public void get_color_name(float red, float green,float blue){
        if ((red<=0.5) && (red >=0)&& (green<=0.5)&&(green>=0) && (blue<=0.5)&&(blue>=0)){
            colorName="black";
        }
        if ((red<=1) && (red >=0.3984375)&& (green<=0.234375)&&(green>=0) && (blue<=0.5)&&(blue>=0)){
            colorName="red";
        }
        getColorRGB(red,green,blue);
    }
    public void getColorRGB(float red,float green, float blue){
        redVal= (int) (red*256);
        greenVal= (int) (green*256);
        blueVal= (int) (blue*256);
    }
}