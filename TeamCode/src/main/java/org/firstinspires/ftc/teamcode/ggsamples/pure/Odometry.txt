package org.firstinspires.ftc.teamcode.pure;

import com.arcrobotics.ftclib.geometry.Pose2d;
import com.arcrobotics.ftclib.geometry.Rotation2d;
import com.arcrobotics.ftclib.geometry.Translation2d;
import com.arcrobotics.ftclib.kinematics.wpilibkinematics.MecanumDriveKinematics;
import com.arcrobotics.ftclib.kinematics.wpilibkinematics.MecanumDriveOdometry;
import com.arcrobotics.ftclib.kinematics.wpilibkinematics.MecanumDriveWheelSpeeds;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import org.firstinspires.ftc.teamcode.externalHardware.autoHardware;

@Autonomous(name = "blankAuto", group = "Robot")
@Disabled
public class odometry extends LinearOpMode {
    autoHardware robot = new autoHardware(this);

    @Override
    public void runOpMode() throws InterruptedException {
        robot.initAuto(hardwareMap);
        // Locations of the wheels relative to the robot center.
        Translation2d m_frontLeftLocation =
                new Translation2d(0.381, 0.381);
        Translation2d m_frontRightLocation =
                new Translation2d(0.381, -0.381);
        Translation2d m_backLeftLocation =
                new Translation2d(-0.381, 0.381);
        Translation2d m_backRightLocation =
                new Translation2d(-0.381, -0.381);

// Creating my kinematics object using the wheel locations.
        MecanumDriveKinematics m_kinematics = new MecanumDriveKinematics
                (
                        m_frontLeftLocation, m_frontRightLocation,
                        m_backLeftLocation, m_backRightLocation
                );

// Creating my odometry object from the kinematics object. Here,
// our starting pose is 5 meters along the long end of the field and in the
// center of the field along the short end, facing forward.
        MecanumDriveOdometry m_odometry = new MecanumDriveOdometry
                (
                        m_kinematics, getGyroHeading(),
                        new Pose2d(5.0, 13.5, new Rotation2d()
                        );
        if (opModeIsActive()) {//while the op mode is active

        }
    }
    public void periodic() {
        // Get my wheel speeds; assume .getRate() has been
        // set up to return velocity of the encoder
        // in meters per second.
        MecanumDriveWheelSpeeds wheelSpeeds = new MecanumDriveWheelSpeeds
                (
                        m_frontLeftEncoder.getRate(), robot.motorFrontRight.getRate(),
                        m_backLeftEncoder.getRate(), m_backRightEncoder.getRate()
                );

        // Get my gyro angle.
        Rotation2d gyroAngle = Rotation2d.fromDegrees(m_gyro.getAngle());

        // Update the pose
        m_pose = m_odometry.update(gyroAngle, wheelSpeeds);
    }
}
